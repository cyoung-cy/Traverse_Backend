version: "3.8"

services:
  kafka:
    image: bitnami/kafka:latest
    platform: linux/arm64/v8
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_LISTENERS: "CONTROLLER://:9093,PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: "168"
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: "300000"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - taptalk-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  eureka-server:
    build:
      context: ./eureka
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - taptalk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - taptalk-network
    restart: unless-stopped

  ai-map:
    build:
      context: ./aiMap
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: ai-map
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://db:3306/map_platform
      - SPRING_DATASOURCE_USERNAME=map_user
      - SPRING_DATASOURCE_PASSWORD=map_password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - taptalk-network
    restart: unless-stopped

  user-auth:
    build:
      context: ./admin_gradle/user-auth
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: user-auth
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://db:3306/userdb?allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root_password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.MariaDBDialect
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_APPLICATION_NAME=user-auth
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=user-auth
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS=10
      - EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS=30
      - SERVER_PORT=8081
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
    volumes:
      - ./firebase-credentials.json:/app/firebase-credentials.json
      - ./tabtalk-c3dc3-firebase-adminsdk-fbsvc-25c323ffdc.json:/app/tabtalk-c3dc3-firebase-adminsdk-fbsvc-25c323ffdc.json
    depends_on:
      eureka-server:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - taptalk-network
    restart: unless-stopped

  message-service:
    build:
      context: ./message-service
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: message-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      FIREBASE_CREDENTIALS_PATH: /app/firebase-credentials.json
    volumes:
      - ./firebase-credentials.json:/app/firebase-credentials.json
    networks:
      - taptalk-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      args:
        - GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true
    container_name: notification-service
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      FIREBASE_CREDENTIALS_PATH: /app/firebase-credentials.json
    volumes:
      - ./firebase-credentials.json:/app/firebase-credentials.json
    networks:
      - taptalk-network
    restart: unless-stopped

  db:
    image: mariadb:latest
    container_name: taptalk-db
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: map_platform
      MYSQL_USER: map_user
      MYSQL_PASSWORD: map_password
      MYSQL_MULTIPLE_DATABASES: map_platform,userdb
      TZ: Asia/Seoul
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
      - mariadb-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - taptalk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-proot_password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      --character-set-server=utf8mb4 
      --collation-server=utf8mb4_unicode_ci 
      --innodb_use_native_aio=0 
      --skip-name-resolve
      --default-authentication-plugin=mysql_native_password

networks:
  taptalk-network:
    driver: bridge

volumes:
  mariadb-data:
  kafka_data:
